import io
from typing import List, Optional
from fpdf import FPDF
import requests
import tempfile
from datetime import datetime

def generate_pdf(company_name: str, images: List[str], descriptions: Optional[List[str]] = None, 
               header_image_url: Optional[str] = None) -> io.BytesIO:
    """
    Generate a professional PDF containing AI image ideas
    
    Args:
        company_name: Name of the company
        images: List of image URLs for generated images
        descriptions: List of idea descriptions (title, description, purpose)
        header_image_url: URL of the header image (banner)
        
    Returns:
        BytesIO object containing the generated PDF
    """
    # Create PDF with professional settings
    class PDF(FPDF):
        def header(self):
            # No default header
            pass
            
        def footer(self):
            # Footer with page number and branding
            self.set_y(-15)
            self.set_font('Arial', 'I', 8)
            self.set_text_color(128, 128, 128)  # Gray
            self.cell(0, 10, f'Page {self.page_no()}   |   Generated by The AI Consultant   |   {datetime.now().strftime("%Y-%m-%d")}', 0, 0, 'C')
    
    # Create PDF
    pdf = PDF()
    pdf.set_author('The AI Consultant')
    pdf.set_title(f'AI Image Ideas for {company_name}')
    pdf.set_auto_page_break(auto=True, margin=15)
    
    # Use built-in fonts instead of custom fonts
    # FPDF has built-in support for standard fonts: Courier, Helvetica, Times, Symbol, ZapfDingbats
    # We'll use the standard Arial which is similar to Helvetica
    
    # Color definitions for a professional look
    title_color = (66, 133, 244)       # Blue
    subtitle_color = (66, 133, 244)    # Blue
    text_color = (50, 50, 50)          # Dark gray
    purpose_bg_color = (245, 245, 245) # Light gray
    divider_color = (220, 220, 220)    # Light gray
    
    # Add single page with all content
    pdf.add_page()
    
    # Header and company info section
    pdf.set_font('Arial', 'B', 18)
    pdf.set_text_color(*title_color)
    pdf.cell(0, 10, f"AI Image Ideas for {company_name}", ln=True, align="C")
    
    # Add a subtle horizontal line
    pdf.set_draw_color(*divider_color)
    pdf.line(20, pdf.get_y() + 3, 190, pdf.get_y() + 3)
    pdf.ln(8)
    
    # Add message about adapting ideas
    pdf.set_font('Arial', 'I', 11)
    pdf.set_text_color(80, 80, 80)
    pdf.set_fill_color(240, 248, 255)  # Light blue background
    pdf.multi_cell(0, 6, "These AI-generated ideas are meant to serve as inspiration. We encourage you to adapt them to your specific business needs, brand identity, and target audience. Consider adding your logo or other brand elements to customize the final designs for your business.", 0, 'L', True)
    pdf.ln(5)
    
    # Add header banner image if provided
    if header_image_url:
        try:
            # Download image from URL
            response = requests.get(header_image_url)
            response.raise_for_status()
            
            # Save image to temporary file
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                temp_file.write(response.content)
                temp_file_path = temp_file.name
            
            # Calculate appropriate width while maintaining aspect ratio
            max_width = 180
            img_width = max_width
            # Add banner image
            pdf.image(temp_file_path, x=15, y=pdf.get_y(), w=img_width)
            
            # Clean up temporary file
            import os
            os.unlink(temp_file_path)
            
            # Adjust Y position after image
            pdf.ln(50)  # This will need adjustment based on actual image
            
        except Exception as e:
            # Handle image loading error gracefully (without error message)
            pdf.ln(5)
    
    # Process descriptions
    if descriptions:
        # We want all ideas on 1-2 pages, not separate pages
        for i, description in enumerate(descriptions):
            # Sanitize description - replace any special Unicode characters 
            # that might cause issues in the PDF
            sanitized_description = description
            # Replace common problematic characters
            sanitized_description = sanitized_description.replace('\u2019', "'")  # Right single quotation mark
            sanitized_description = sanitized_description.replace('\u201C', '"')  # Left double quotation mark
            sanitized_description = sanitized_description.replace('\u201D', '"')  # Right double quotation mark
            sanitized_description = sanitized_description.replace('\u2013', '-')  # En dash
            sanitized_description = sanitized_description.replace('\u2014', '--') # Em dash
            
            # Try to extract title, description, and purpose from the text
            title = ""
            desc = ""
            purpose = ""
            
            if "Title:" in sanitized_description and "Description:" in sanitized_description:
                parts = sanitized_description.split("Title:", 1)[1]
                
                if "Description:" in parts:
                    title_parts = parts.split("Description:", 1)
                    title = title_parts[0].strip()
                    
                    if "Purpose:" in title_parts[1]:
                        desc_parts = title_parts[1].split("Purpose:", 1)
                        desc = desc_parts[0].strip()
                        purpose = desc_parts[1].strip()
                    else:
                        desc = title_parts[1].strip()
            else:
                # If we can't extract, use the whole description
                desc = sanitized_description
            
            # Add idea section header with visual styling
            pdf.set_fill_color(245, 245, 250)  # Very light blue background
            pdf.set_text_color(*subtitle_color)
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, f"IDEA {i+1}", 0, 1, 'L', True)
            pdf.ln(2)
            
            # Add title with styling
            if title:
                pdf.set_text_color(*subtitle_color)
                pdf.set_font('Arial', 'B', 12)
                pdf.cell(0, 8, f"Title: {title}", 0, 1, 'L')
            
            # Add description
            if desc:
                pdf.set_text_color(*text_color)
                pdf.set_font('Arial', '', 11)
                pdf.multi_cell(0, 6, f"Description: {desc}")
            
            # Add purpose with subtle background
            if purpose:
                pdf.ln(2)
                pdf.set_fill_color(*purpose_bg_color)
                pdf.set_text_color(80, 80, 80)
                pdf.set_font('Arial', 'I', 11)
                pdf.multi_cell(0, 6, f"Purpose: {purpose}", 0, 'L', True)
            
            # Add space between ideas
            pdf.ln(8)
            
            # Add a subtle divider between ideas (except after the last one)
            if i < len(descriptions) - 1:
                pdf.set_draw_color(*divider_color)
                pdf.line(30, pdf.get_y() - 4, 180, pdf.get_y() - 4)
                pdf.ln(8)
    
    # Add generated images in an attractive layout if available
    if images:
        pdf.ln(5)
        pdf.set_font('Arial', 'B', 14)
        pdf.set_text_color(*subtitle_color)
        pdf.set_fill_color(245, 245, 250)  # Very light blue background
        pdf.cell(0, 10, "GENERATED IMAGES", 0, 1, 'L', True)
        pdf.ln(5)
        
        for i, img_url in enumerate(images):
            try:
                # Download image from URL
                response = requests.get(img_url)
                response.raise_for_status()
                
                # Save image to temporary file
                with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                    temp_file.write(response.content)
                    temp_file_path = temp_file.name
                
                # Add a caption for the image
                pdf.set_font('Arial', 'B', 11)
                pdf.set_text_color(*text_color)
                idea_num = i+1  # Simply use the index+1 to identify images with ideas
                pdf.cell(0, 6, f"Generated Image for Idea {idea_num}", 0, 1, 'C')
                
                # Add image with proper sizing (not too large)
                pdf.image(temp_file_path, x=50, w=110)  # Center and not full width
                
                # Clean up temporary file
                import os
                os.unlink(temp_file_path)
                
                # Add space after image
                pdf.ln(5)
                
            except Exception as e:
                # Handle image loading error gracefully
                pdf.set_font('Arial', 'I', 10)
                pdf.set_text_color(150, 150, 150)
                pdf.cell(0, 10, "Image could not be loaded", 0, 1, 'C')
    
    # Save PDF to BytesIO
    pdf_buffer = io.BytesIO()
    
    # Handle Unicode characters properly with the standard fpdf library
    # First output to a string (dest='S')
    pdf_str = pdf.output(dest='S')
    
    # Then encode as bytes with latin-1, replacing any non-compatible characters
    if isinstance(pdf_str, str):  # Python 3
        pdf_bytes = pdf_str.encode('latin-1', 'replace')
    else:  # Already bytes in Python 2
        pdf_bytes = pdf_str
    
    # Write to the BytesIO object
    pdf_buffer.write(pdf_bytes)
    pdf_buffer.seek(0)
    
    return pdf_buffer
